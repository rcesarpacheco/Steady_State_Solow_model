[{"name":"app.R","content":"library(shiny)\n# library(rsconnect)\nlibrary(latex2exp)\nlibrary(mathjaxr)\nalpha <- 1/3\ndelta <- 0.05\ns_max <- 1\nA_max <- 1.4\nA_min <- 0.7\ndelta_min <- 2/100\noutput <- function(k,A) {\n  return(A*k^alpha)\n}\n\nfind_k_ss <- function(savings,delta,A) {\n  k_ss <- (A*savings/delta)^(1/(1-alpha))\n  return(k_ss)\n}\n\n\n\n# Define UI for application\nui <- fluidPage(\n  withMathJax(),\n  # Application title\n  titlePanel(\"Steady State in the Solow Model\"),\n  # Add notes\n  fluidRow(\n    column(12,\n             p(\"This app calculates and visualizes the steady state in the Solow Model.\"),\n            p(\"The production function is given by Y = A * K^(1/3) * L^(2/3) where A is the productivity parameter, K is the capital stock, and L is the labor force\"),\n           p(\"Adjust the sliders to change the values and see the effects on investment, output, and depreciation.\")\n    )\n  ),\n  # Sidebar with a slider input for the parameter s\n  sidebarLayout(\n    sidebarPanel(\n      sliderInput(\"s\",\n                  \"Savings Rate:\",\n                  min = 0,\n                  max = s_max,\n                  value = 0.5,\n                  step = 0.05),\n    sliderInput(\"delta\",\n                \"Depreciation rate:\",\n                min = delta_min,\n                max = 0.15,\n                value = 0.05,\n                step = 0.005),\n    sliderInput(\"A\",\n                \"Productivity A:\",\n                min = A_min,\n                max = A_max,\n                value = 1,\n                step = 0.005)\n  ),\n    # Show a plot of the generated function\n    mainPanel(\n      plotOutput(\"plot\")\n      # Display calculated results\n      # textOutput(\"y_ss_text\"),\n      # textOutput(\"i_ss_text\")\n    )\n  )\n)\n\n# Define server logic required to draw the plot\nserver <- function(input, output) {\n  \n  output$plot <- renderPlot({\n    s <- input$s\n    delta <- input$delta\n    A <- input$A\n    k_ss_max <- find_k_ss(s_max,delta_min,A_max)\n    k_max <- k_ss_max\n    k <- seq(0, k_max, by = 0.1)\n    ymax <- k[length(k)]^alpha\n    depreciation <- delta*k\n    y <- output(k,A)\n    investment <- s * y\n    k_ss <- find_k_ss(input$s,delta,A)\n    i_ss <- delta*k_ss\n    y_ss <- output(k_ss,A)\n    plot(k, investment, type = \"l\", col = \"blue\", lwd = 2,\n         xlab = \"k\", ylim = c(0, ymax),xlim = c(0, k_max),ylab='',\n        yaxs=\"i\",xaxs='i',xaxt='n',yaxt='n')\n    axis(1, at = c(k_ss),labels=c(paste('k*=',round(k_ss,2))))\n    \n    # axis(2, at = c(i_ss,y_ss),labels=c('i*','y*'),col=c('blue','black'))\n    axis(2, at = c(i_ss,y_ss),labels=F)\n    \n    text(y = c(i_ss,y_ss), x = par(\"usr\")[1] - 6, \n         labels =c(paste0('i*= ',round(i_ss,2)),paste0('y*= ',round(y_ss,2))), \n         col = c(\"blue\", \"black\"), xpd = TRUE, srt = 90,cex=0.7)\n    \n    lines(k, y , col = \"red\", lwd = 2)\n    lines(k, depreciation , col = \"gray\", lwd = 2)\n    \n    segments(k_ss,0,k_ss,i_ss,col='blue',lty='dashed')\n    # text(k_ss, i_ss/2, labels='i*', pos = 4, col = \"blue\")\n    points(k_ss, i_ss, col = \"blue\", pch = 19, cex = 1.5)\n    \n    segments(k_ss,i_ss,k_ss,y_ss,col='red')\n    arrows(k_ss, i_ss+0.2, k_ss, i_ss, col = \"red\",length = 0.15)\n    arrows(k_ss, y_ss-0.2, k_ss, y_ss, col = \"red\",length = 0.15)\n    \n    text(k_ss, (y_ss-i_ss)/2+i_ss, labels=paste('c*=',round(y_ss-i_ss,2)), pos = 4, col = \"red\")\n    \n    segments(0,y_ss,k_ss,y_ss,col='black',lty='dashed')\n    segments(0,i_ss,k_ss,i_ss,col='blue',lty='dashed')\n    \n    # text(k_ss, 1.1*y_ss, labels='y*', pos = 4, col = \"black\")\n    points(k_ss, y_ss, col = \"black\", pch = 19, cex = 1.5)\n    \n    legend(\"topright\", \n           legend = c(\"Output\", \"Investment\",'Depreciation'), col = c(\"red\", \"blue\",'gray'), \n           lwd = 2,bty='n')\n    \n    \n    y_ss_val <- reactive({y_ss})\n    \n    i_ss_val <- reactive({i_ss})\n    \n    # Display mean and standard deviation\n    output$y_ss_text <- renderText({\n      paste(\"Steady state output per capita =\", round(y_ss_val(), 2))\n    })\n    \n    output$i_ss_text <- renderText({\n      paste(\"Steady state investment per capita =\", round(i_ss_val(), 2))\n    })\n    \n  })\n}\nshinyApp(ui = ui, server = server)\n\n","type":"text"}]
